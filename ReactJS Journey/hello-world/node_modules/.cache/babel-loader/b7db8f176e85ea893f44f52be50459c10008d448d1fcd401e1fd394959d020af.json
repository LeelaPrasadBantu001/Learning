{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GMRIT\\\\Desktop\\\\WORK\\\\Learning\\\\ReactJS Journey\\\\hello-world\\\\src\\\\components\\\\ErrorBoundary.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true\n    };\n  }\n  render() {\n    if (this.state.hasError) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Something went wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 15\n      }, this);\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n\n//getDerivedStateFromError(error) is a lifecycle method which is used to catch the error and return the state\n//hasError:true is used to update the state\n//this.props.children is used to render the child component\n//this.state.hasError is used to check the state and if it is true then it will return the error message\n//if it is false then it will return the child component\n//this is how we can use error boundary to catch the error and display the error message instead of the whole component\n//ErrorBoundary.js is used to catch the error and display the error message","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","ErrorBoundary","constructor","props","state","hasError","getDerivedStateFromError","error","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/GMRIT/Desktop/WORK/Learning/ReactJS Journey/hello-world/src/components/ErrorBoundary.js"],"sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nexport class ErrorBoundary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromError(error){\r\n        return{\r\n            hasError:true\r\n        }\r\n    }\r\n\r\n    \r\n  render() {\r\n   if(this.state.hasError){\r\n       return <h1>Something went wrong</h1>\r\n   }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n\r\n\r\n//getDerivedStateFromError(error) is a lifecycle method which is used to catch the error and return the state\r\n//hasError:true is used to update the state\r\n//this.props.children is used to render the child component\r\n//this.state.hasError is used to check the state and if it is true then it will return the error message\r\n//if it is false then it will return the child component\r\n//this is how we can use error boundary to catch the error and display the error message instead of the whole component\r\n//ErrorBoundary.js is used to catch the error and display the error message\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGxC,OAAO,MAAMC,aAAa,SAASH,SAAS,CAAC;EAEzCI,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,KAAK,GAAG;MACTC,QAAQ,EAAC;IACb,CAAC;EACL;EAEA,OAAOC,wBAAwBA,CAACC,KAAK,EAAC;IAClC,OAAM;MACFF,QAAQ,EAAC;IACb,CAAC;EACL;EAGFG,MAAMA,CAAA,EAAG;IACR,IAAG,IAAI,CAACJ,KAAK,CAACC,QAAQ,EAAC;MACnB,oBAAOL,OAAA;QAAAS,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IACxC;IACC,OAAO,IAAI,CAACV,KAAK,CAACM,QAAQ;EAC5B;AACF;AAEA,eAAeR,aAAa;;AAG5B;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}