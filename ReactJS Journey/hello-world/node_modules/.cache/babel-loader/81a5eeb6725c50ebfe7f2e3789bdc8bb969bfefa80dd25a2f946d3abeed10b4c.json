{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GMRIT\\\\Desktop\\\\WORK\\\\Learning\\\\ReactJS Journey\\\\hello-world\\\\src\\\\components\\\\WithCounter.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WithCounter = (WrappedComponent, incrementNumber) => {\n  class WithCounter extends React.Component {\n    constructor(props) {\n      super(props);\n      this.incrementCount = () => {\n        this.setState(prevState => {\n          return {\n            count: prevState.count + incrementNumber\n          };\n        });\n      };\n      this.state = {\n        count: 0\n      };\n    }\n    render() {\n      console.log(this.props.name);\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        count: this.state.count,\n        incrementCount: this.incrementCount,\n        ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 16\n      }, this);\n    }\n  }\n  return WithCounter;\n};\n_c = WithCounter;\nexport default WithCounter;\n\n//Higher Order Components (HOC)\n//These are the components that take a component as an argument and return a new component.\n//That new component is called Enhanced Component\n//const NewComponent = higherOrderComponent(originalComponent)\n//Usually Used for Code Reuse, Logic and Bootstraping\n//Example: ClickCounter.js and HoverCounter.js\n// Are the same except for the name of the component and the event handler\n// So we can create a HOC to reuse the code\n// Create a new file with the name HOC.js\n//when we use props in the HOC we can pass it as props to the original component(withcounter.js) \n//we have to use spread operator to pass the props to the original component for that we have to use {...this.props}\n//passing parameter to the HOC is done by passing it to the original component for that we have to use {...this.props} \n//WithCounter(ClickCounter, 5) and original component we use const WithCounter = (WrappedComponent, incrementNumber) \nvar _c;\n$RefreshReg$(_c, \"WithCounter\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WithCounter","WrappedComponent","incrementNumber","Component","constructor","props","incrementCount","setState","prevState","count","state","render","console","log","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GMRIT/Desktop/WORK/Learning/ReactJS Journey/hello-world/src/components/WithCounter.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst WithCounter = (WrappedComponent, incrementNumber) => {\r\n\r\n    class WithCounter extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n        \r\n            this.state = {\r\n                 count: 0\r\n            }\r\n        }\r\n    \r\n        incrementCount = () => {\r\n            this.setState(prevState => {\r\n                return { count: prevState.count + incrementNumber}\r\n            })\r\n        }\r\n    \r\n        render() {\r\n        console.log(this.props.name)\r\n        return <WrappedComponent count={this.state.count} incrementCount={this.incrementCount}  {...this.props}/>;\r\n        }\r\n    }\r\n    return WithCounter;\r\n\r\n    }\r\n\r\nexport default WithCounter;\r\n\r\n\r\n\r\n//Higher Order Components (HOC)\r\n//These are the components that take a component as an argument and return a new component.\r\n//That new component is called Enhanced Component\r\n//const NewComponent = higherOrderComponent(originalComponent)\r\n//Usually Used for Code Reuse, Logic and Bootstraping\r\n//Example: ClickCounter.js and HoverCounter.js\r\n// Are the same except for the name of the component and the event handler\r\n// So we can create a HOC to reuse the code\r\n// Create a new file with the name HOC.js\r\n//when we use props in the HOC we can pass it as props to the original component(withcounter.js) \r\n//we have to use spread operator to pass the props to the original component for that we have to use {...this.props}\r\n//passing parameter to the HOC is done by passing it to the original component for that we have to use {...this.props} \r\n//WithCounter(ClickCounter, 5) and original component we use const WithCounter = (WrappedComponent, incrementNumber) "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAACC,gBAAgB,EAAEC,eAAe,KAAK;EAEvD,MAAMF,WAAW,SAASH,KAAK,CAACM,SAAS,CAAC;IAEtCC,WAAWA,CAACC,KAAK,EAAE;MACf,KAAK,CAACA,KAAK,CAAC;MAAA,KAOhBC,cAAc,GAAG,MAAM;QACnB,IAAI,CAACC,QAAQ,CAACC,SAAS,IAAI;UACvB,OAAO;YAAEC,KAAK,EAAED,SAAS,CAACC,KAAK,GAAGP;UAAe,CAAC;QACtD,CAAC,CAAC;MACN,CAAC;MATG,IAAI,CAACQ,KAAK,GAAG;QACRD,KAAK,EAAE;MACZ,CAAC;IACL;IAQAE,MAAMA,CAAA,EAAG;MACTC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK,CAACS,IAAI,CAAC;MAC5B,oBAAOf,OAAA,CAACE,gBAAgB;QAACQ,KAAK,EAAE,IAAI,CAACC,KAAK,CAACD,KAAM;QAACH,cAAc,EAAE,IAAI,CAACA,cAAe;QAAA,GAAM,IAAI,CAACD;MAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACzG;EACJ;EACA,OAAOlB,WAAW;AAElB,CAAC;AAAAmB,EAAA,GAzBCnB,WAAW;AA2BjB,eAAeA,WAAW;;AAI1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}