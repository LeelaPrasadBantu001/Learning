{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GMRIT\\\\Desktop\\\\WORK\\\\Learning\\\\ReactJS Journey\\\\hello-world\\\\src\\\\components\\\\ClickCounter.js\";\nimport React, { Component } from 'react';\nimport WithCounter from './WithCounter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ClickCounter extends Component {\n  render() {\n    // const {count} = this.state\n    const {\n      count,\n      incrementCount\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCount,\n      children: [\" \", this.props.name, \" Clicked \", count, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default _c = WithCounter(ClickCounter);\n\n//Higher Order Components (HOC)\n//These are the components that take a component as an argument and return a new component.\n//That new component is called Enhanced Component\n//const NewComponent = higherOrderComponent(originalComponent)\n//Usually Used for Code Reuse, Logic and Bootstraping\n//Example: ClickCounter.js and HoverCounter.js\n// Are the same except for the name of the component and the event handler\n// So we can create a HOC to reuse the code\n// Create a new file with the name HOC.js\n//when we use props in the HOC we can pass it as props to the original component(withcounter.js) \n//we have to use spread operator to pass the props to the original component for\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","WithCounter","jsxDEV","_jsxDEV","ClickCounter","render","count","incrementCount","props","onClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GMRIT/Desktop/WORK/Learning/ReactJS Journey/hello-world/src/components/ClickCounter.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport WithCounter from './WithCounter'\r\n\r\nexport class ClickCounter extends Component {\r\n\r\n    \r\n  render() {\r\n    // const {count} = this.state\r\n    const {count, incrementCount} = this.props\r\n    \r\n    return <button onClick={incrementCount}> {this.props.name} Clicked {count} times</button>\r\n    \r\n  }\r\n}\r\n\r\nexport default WithCounter(ClickCounter)\r\n\r\n\r\n//Higher Order Components (HOC)\r\n//These are the components that take a component as an argument and return a new component.\r\n//That new component is called Enhanced Component\r\n//const NewComponent = higherOrderComponent(originalComponent)\r\n//Usually Used for Code Reuse, Logic and Bootstraping\r\n//Example: ClickCounter.js and HoverCounter.js\r\n// Are the same except for the name of the component and the event handler\r\n// So we can create a HOC to reuse the code\r\n// Create a new file with the name HOC.js\r\n//when we use props in the HOC we can pass it as props to the original component(withcounter.js) \r\n//we have to use spread operator to pass the props to the original component for\r\n "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,WAAW,MAAM,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,YAAY,SAASJ,SAAS,CAAC;EAG1CK,MAAMA,CAAA,EAAG;IACP;IACA,MAAM;MAACC,KAAK;MAAEC;IAAc,CAAC,GAAG,IAAI,CAACC,KAAK;IAE1C,oBAAOL,OAAA;MAAQM,OAAO,EAAEF,cAAe;MAAAG,QAAA,GAAC,GAAC,EAAC,IAAI,CAACF,KAAK,CAACG,IAAI,EAAC,WAAS,EAACL,KAAK,EAAC,QAAM;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAE3F;AACF;AAEA,eAAAC,EAAA,GAAef,WAAW,CAACG,YAAY,CAAC;;AAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}