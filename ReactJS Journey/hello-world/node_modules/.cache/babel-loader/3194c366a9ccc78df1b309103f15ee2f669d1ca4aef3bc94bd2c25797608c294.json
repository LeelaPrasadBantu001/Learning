{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GMRIT\\\\Desktop\\\\WORK\\\\Learning\\\\ReactJS Journey\\\\hello-world\\\\src\\\\components\\\\PortalDemo.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PortalDemo() {\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Portal Heading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this), document.getElementById('portal-root'));\n}\n_c = PortalDemo;\nexport default PortalDemo;\n\n//ReactDom.createPortal(child, container)\n//The first argument(child) is any renderable React child, such as an element, string, or fragment. The second argument(container) is a DOM element.\n//The portal element is inserted in the DOM tree after the <h1> element, but before the sibling <p> element.\n//Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in every other way. Features like context work exactly the same regardless of whether the child is a portal, as the portal still exists in the React tree regardless of position in the DOM tree.\nvar _c;\n$RefreshReg$(_c, \"PortalDemo\");","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","PortalDemo","createPortal","children","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","_c","$RefreshReg$"],"sources":["C:/Users/GMRIT/Desktop/WORK/Learning/ReactJS Journey/hello-world/src/components/PortalDemo.js"],"sourcesContent":["import React from 'react'\r\nimport  ReactDOM  from 'react-dom'\r\n\r\nfunction PortalDemo() {\r\n  return ReactDOM.createPortal(\r\n   \r\n      <h1>Portal Heading</h1>,\r\n\r\n    document.getElementById('portal-root')\r\n  )\r\n}\r\n\r\nexport default PortalDemo\r\n\r\n//ReactDom.createPortal(child, container)\r\n//The first argument(child) is any renderable React child, such as an element, string, or fragment. The second argument(container) is a DOM element.\r\n//The portal element is inserted in the DOM tree after the <h1> element, but before the sibling <p> element.\r\n//Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in every other way. Features like context work exactly the same regardless of whether the child is a portal, as the portal still exists in the React tree regardless of position in the DOM tree.\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAQC,QAAQ,MAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,UAAUA,CAAA,EAAG;EACpB,oBAAOH,QAAQ,CAACI,YAAY,eAExBF,OAAA;IAAAG,QAAA,EAAI;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,EAEzBC,QAAQ,CAACC,cAAc,CAAC,aAAa,CACvC,CAAC;AACH;AAACC,EAAA,GAPQT,UAAU;AASnB,eAAeA,UAAU;;AAEzB;AACA;AACA;AACA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}