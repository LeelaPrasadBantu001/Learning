{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GMRIT\\\\Desktop\\\\WORK\\\\Learning\\\\ReactJS Journey\\\\hello-world\\\\src\\\\components\\\\ClickCounter.js\";\nimport React, { Component } from 'react';\nimport UpdatedComponent from './WithCounter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ClickCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementCount = () => {\n      this.setState(prevState => {\n        return {\n          count: prevState.count + 1\n        };\n      });\n    };\n    this.state = {\n      count: 0\n    };\n  }\n  render() {\n    const {\n      count\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.incrementCount,\n      children: [\" \", this.props.name, \" Clicked \", count, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default _c = UpdatedComponent(ClickCounter);\n\n//Higher Order Components (HOC)\n//These are the components that take a component as an argument and return a new component.\n//That new component is called Enhanced Component\n//const NewComponent = higherOrderComponent(originalComponent)\n//Usually Used for Code Reuse, Logic and Bootstraping\n//Example: ClickCounter.js and HoverCounter.js\n// Are the same except for the name of the component and the event handler\n// So we can create a HOC to reuse the code\n// Create a new file with the name HOC.js\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","UpdatedComponent","jsxDEV","_jsxDEV","ClickCounter","constructor","props","incrementCount","setState","prevState","count","state","render","onClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GMRIT/Desktop/WORK/Learning/ReactJS Journey/hello-world/src/components/ClickCounter.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport UpdatedComponent from './WithCounter'\r\n\r\nexport class ClickCounter extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    incrementCount = () => {\r\n        this.setState(prevState => {\r\n            return { count: prevState.count + 1 }\r\n        })\r\n    }\r\n  render() {\r\n    const {count} = this.state\r\n\r\n    return <button onClick={this.incrementCount}> {this.props.name} Clicked {count} times</button>\r\n    \r\n  }\r\n}\r\n\r\nexport default UpdatedComponent(ClickCounter)\r\n\r\n\r\n//Higher Order Components (HOC)\r\n//These are the components that take a component as an argument and return a new component.\r\n//That new component is called Enhanced Component\r\n//const NewComponent = higherOrderComponent(originalComponent)\r\n//Usually Used for Code Reuse, Logic and Bootstraping\r\n//Example: ClickCounter.js and HoverCounter.js\r\n// Are the same except for the name of the component and the event handler\r\n// So we can create a HOC to reuse the code\r\n// Create a new file with the name HOC.js"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,gBAAgB,MAAM,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,YAAY,SAASJ,SAAS,CAAC;EAExCK,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAA,KAOhBC,cAAc,GAAG,MAAM;MACnB,IAAI,CAACC,QAAQ,CAACC,SAAS,IAAI;QACvB,OAAO;UAAEC,KAAK,EAAED,SAAS,CAACC,KAAK,GAAG;QAAE,CAAC;MACzC,CAAC,CAAC;IACN,CAAC;IATG,IAAI,CAACC,KAAK,GAAG;MACTD,KAAK,EAAE;IACX,CAAC;EACL;EAOFE,MAAMA,CAAA,EAAG;IACP,MAAM;MAACF;IAAK,CAAC,GAAG,IAAI,CAACC,KAAK;IAE1B,oBAAOR,OAAA;MAAQU,OAAO,EAAE,IAAI,CAACN,cAAe;MAAAO,QAAA,GAAC,GAAC,EAAC,IAAI,CAACR,KAAK,CAACS,IAAI,EAAC,WAAS,EAACL,KAAK,EAAC,QAAM;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAEhG;AACF;AAEA,eAAAC,EAAA,GAAenB,gBAAgB,CAACG,YAAY,CAAC;;AAG7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}