Resources: https://www.youtube.com/watch?v=GFgJkfScVNU&t=1456s
        - https://www.docker.com/
        - https://www.docker.com/products/docker-desktop/


Docker overview: 
- Docker is an open platform for developing, packaging, shipping, and running applications. 
- consistency, Portability
- Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. 
- With Docker, you can manage your infrastructure in the same ways you manage your applications. 
- By taking advantage of Docker's methodologies for shipping, testing, and deploying code, you can significantly reduce the delay between writing code and running it in production.

The Docker platform:
- Docker provides the ability to package and run an application in a loosely isolated environment called a container. 
- The isolation and security lets you run many containers simultaneously on a given host. 
- Containers are lightweight and contain everything needed to run the application, so you don't need to rely on what's installed on the host. 
- You can share containers while you work, and be sure that everyone you share with gets the same container that works in the same way.

Docker provides tooling and a platform to manage the lifecycle of your containers:
- Develop your application and its supporting components using containers.
- The container becomes the unit for distributing and testing your application.
- When you're ready, deploy your application into your production environment, as a container or an orchestrated service. 
- This works the same whether your production environment is a local data center, a cloud provider, or a hybrid of the two.

What can I use Docker for?
- Fast, consistent delivery of your applications
- Docker streamlines the development lifecycle by allowing developers to work in standardized environments using local containers which provide your applications and services. Containers are great for continuous integration and continuous delivery (CI/CD) workflows.

Docker architecture:
- Docker uses a client-server architecture. 
- The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers.
- The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. 
- The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface. 
- Another Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.

The Docker daemon:
- The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. 
- A daemon can also communicate with other daemons to manage Docker services.

The Docker client:
- The Docker client (docker) is the primary way that many Docker users interact with Docker.
- When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. 
- The docker command uses the Docker API. The Docker client can communicate with more than one daemon.

Docker Desktop:
- Docker Desktop is an easy-to-install application for your Mac, Windows or Linux environment that enables you to build and share containerized applications and microservices. 
- Docker Desktop includes the Docker daemon (dockerd), the Docker client (docker), Docker Compose, Docker Content Trust, Kubernetes, and Credential Helper. 

Docker registries
- A Docker registry stores Docker images. 
- Docker Hub is a public registry that anyone can use, and Docker looks for images on Docker Hub by default. 
- You can even run your own private registry.
- when you use the docker pull or docker run commands, Docker pulls the required images from your configured registry. 
- When you use the docker push command, Docker pushes your image to your configured registry.

Docker objects
- When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. 
- Images: An image is a read-only template with instructions for creating a Docker container. 
        - Often, an image is based on another image, with some additional customization. 
        - For example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.
- Containers: A container is a runnable instance of an image. 
        - You can create, start, stop, move, or delete a container using the Docker API or CLI. 
        - You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.
        - By default, a container is relatively well isolated from other containers and its host machine. 
        - You can control how isolated a container's network, storage, or other underlying subsystems are from other containers or from the host machine.

Intro :
  
Whatâ€™s Docker?
 - it's a platform that enables the development, packaging and execution of applications in a unified environment by 
 - clearly specifying our applications requirements such as no Js versions and necessary
 - packages Docker generates a self-contained box that includes its own operating system and all the components essential for running our application
 - this box acts like a separate computer virtually providing the operating system run times and everything required for our application to run smoothly but why

Why should we use Docker?
 - should we bother using Docker at all big shots like eBay Spotify washing post
 - Yelp and Uber noticed that using Docker made their apps better and faster in
 - terms of both development and deployment Uber for example said in their study that Docker helped them onboard new developers in minutes instead of weeks
 - so what are some of the most common things that Docker helps 
 - first of all consistency across environments, Docker ensures that our app runs the same name on my computer your computer and your boss's computer no more it works on my machine drama it also means
   everyone uses the same commands to run the app no matter what computer they're using since downloading services like node.js isn't the same on Linux Windows or Mac OS developers usually have to
   deal with different operating systems. 
 - second thing is isolation, Docker maintains a clear boundary between our app and its dependencies so we'll have no more
   clashes between applications much like neatly partitioned lunchbox compartments for veggies fruits and bread this improves security simplifies debuging and makes development process smoother
 - next thing is is portability, Docker lets us easily move our applications between different stages like from development to testing or testing to production it's like packaging your app in a lunchbox
   that can be moved around without any hassle 
 - it also helps with Version Control as just like we track versions of our code using git Docker helps us track versions of our application it's like having a rewind button for our app so we can return to a
   previous version if something goes wrong talking about scalability 


How does Docker work?
 - Docker work there are two most important Concepts in Docker, images and containers and the entire workflow revolves around them.
 - Docker image is a lightweight Standalone executable package that includes
   everything needed to run a piece of software including the code run times like node.js
   libraries system tools and even the operating system think of a Docker image as a recipe for our application 
   it not only lists the ingredients being code and libraries but also provides the instructions 
   such as runtime and system tools to create a specific meal meaning to run our application
 - we would want to run this image somewhere right and that's where containers come in. 
   Docker container is a runnable instance of a Docker image it represents the execution environment for a specific application including its code runtime system tools
   and libraries included into Docker image, a container takes everything specified in the image and follows its instructions by executing necessary commands downloading packages and
   setting things up to run our application 
 - volumes a Docker
   volume is a persistent data storage mechanism that allows data to to be shared between a dock container and the
   host machine which is usually a computer or a server or even among multiple
   containers. it ensures data durability and persistence even if the container is stopped or removed
 - next concept is Docker Network 
   it's a Communication channel that enables different Docker containers to talk to each each other or with the external World 
   it creates connectivity allowing containers to share information and services while maintaining isolation.

Docker workflow:
 - Distributed into three parts 
 - Docker client & Docker host (Docker Damon) and Docker registry (Docker Hub) 
 - Docker client is the user interface for interacting with Docker it's the tool 
   we use to give Docker commands we issue commands to the docker client via the command line or a graphical user
   interface instructing it to build run or manage images or containers.
 - Docker host or Docker Damon is the background process responsible for managing containers on the host system
   it listens for Docker client commands creates and manages containers builds images and handles other Docker related tasks
 - Docker registry or Docker Hub is a centralized repository of Docker images
   it hosts both public and private Registries or packages
   Docker is to Docker Hub what Git is to Github.
   In a nutshell Docker images are stored in these Registries and when you run a container Docker may pull the required image 
   from the registry if it's unavailable locally.